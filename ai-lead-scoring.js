// AI-Powered Lead Scoring & Automated Follow-up System
// Revolutionary for small businesses - tracks visitor quality and automates engagement
(function() {
    'use strict';
    
    // Lead scoring algorithm
    class LeadScorer {
        constructor() {
            this.score = 0;
            this.profile = {
                timeOnSite: 0,
                pageViews: 1,
                scrollDepth: 0,
                interactions: [],
                interests: [],
                priceRange: null,
                location: null,
                deviceType: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) ? 'mobile' : 'desktop',
                trafficSource: this.getTrafficSource(),
                visitTime: new Date().getHours(),
                dayOfWeek: new Date().getDay(),
                returningVisitor: localStorage.getItem('mrsprinkle_visitor') ? true : false
            };
            
            this.init();
        }
        
        getTrafficSource() {
            const referrer = document.referrer;
            if (!referrer) return 'direct';
            if (referrer.includes('google')) return 'google';
            if (referrer.includes('facebook') || referrer.includes('instagram')) return 'social';
            if (referrer.includes('bing') || referrer.includes('yahoo')) return 'search';
            return 'referral';
        }
        
        init() {
            // Mark as visitor
            localStorage.setItem('mrsprinkle_visitor', Date.now());
            
            // Start tracking
            this.trackTimeOnSite();\n            this.trackScrollBehavior();\n            this.trackInteractions();\n            this.trackLocation();\n            \n            // Calculate initial score\n            this.calculateScore();\n            \n            // Set up real-time scoring\n            setInterval(() => {\n                this.calculateScore();\n                this.triggerActions();\n            }, 5000);\n        }\n        \n        trackTimeOnSite() {\n            const startTime = Date.now();\n            setInterval(() => {\n                this.profile.timeOnSite = Math.round((Date.now() - startTime) / 1000);\n            }, 1000);\n        }\n        \n        trackScrollBehavior() {\n            let maxScroll = 0;\n            let scrollEvents = 0;\n            let lastScrollTime = Date.now();\n            \n            window.addEventListener('scroll', () => {\n                const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);\n                if (scrollPercent > maxScroll) {\n                    maxScroll = scrollPercent;\n                    this.profile.scrollDepth = maxScroll;\n                }\n                \n                scrollEvents++;\n                const now = Date.now();\n                const scrollSpeed = Math.abs(window.scrollY - (this.lastScrollPosition || 0)) / (now - lastScrollTime);\n                \n                // Detect reading vs skimming\n                if (scrollSpeed < 0.5) {\n                    this.profile.readingBehavior = 'careful';\n                } else if (scrollSpeed > 2) {\n                    this.profile.readingBehavior = 'skimming';\n                }\n                \n                this.lastScrollPosition = window.scrollY;\n                lastScrollTime = now;\n            });\n        }\n        \n        trackInteractions() {\n            // Track all meaningful interactions\n            document.addEventListener('click', (e) => {\n                const element = e.target;\n                let interactionType = 'click';\n                let value = 1;\n                \n                if (element.matches('a[href^=\"tel:\"]')) {\n                    interactionType = 'phone_click';\n                    value = 25;\n                } else if (element.matches('a[href^=\"sms:\"]')) {\n                    interactionType = 'sms_click';\n                    value = 20;\n                } else if (element.matches('.cta-button, .submit-btn')) {\n                    interactionType = 'cta_click';\n                    value = 15;\n                } else if (element.matches('.service-card')) {\n                    interactionType = 'service_interest';\n                    value = 10;\n                    const service = element.querySelector('h3')?.textContent;\n                    if (service && !this.profile.interests.includes(service)) {\n                        this.profile.interests.push(service);\n                    }\n                } else if (element.matches('.gallery-item')) {\n                    interactionType = 'gallery_view';\n                    value = 5;\n                }\n                \n                this.profile.interactions.push({\n                    type: interactionType,\n                    value: value,\n                    timestamp: Date.now(),\n                    element: element.tagName + (element.className ? '.' + element.className.split(' ')[0] : '')\n                });\n            });\n            \n            // Track form interactions\n            document.addEventListener('focus', (e) => {\n                if (e.target.matches('input, textarea, select')) {\n                    this.profile.interactions.push({\n                        type: 'form_focus',\n                        value: 8,\n                        timestamp: Date.now(),\n                        field: e.target.name || e.target.id\n                    });\n                }\n            }, true);\n            \n            // Track hover patterns on high-value elements\n            document.querySelectorAll('.service-card, .contact-card, .cta-button').forEach(element => {\n                let hoverStart;\n                element.addEventListener('mouseenter', () => {\n                    hoverStart = Date.now();\n                });\n                \n                element.addEventListener('mouseleave', () => {\n                    if (hoverStart) {\n                        const hoverTime = Date.now() - hoverStart;\n                        if (hoverTime > 2000) { // 2+ seconds hover\n                            this.profile.interactions.push({\n                                type: 'long_hover',\n                                value: 3,\n                                timestamp: Date.now(),\n                                duration: hoverTime\n                            });\n                        }\n                    }\n                });\n            });\n        }\n        \n        trackLocation() {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.profile.location = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    };\n                    \n                    // Calculate distance from Reno\n                    const renoLat = 39.5296, renoLng = -119.8138;\n                    const distance = this.calculateDistance(\n                        this.profile.location.lat, this.profile.location.lng,\n                        renoLat, renoLng\n                    );\n                    \n                    this.profile.distanceFromReno = distance;\n                });\n            }\n        }\n        \n        calculateDistance(lat1, lng1, lat2, lng2) {\n            const R = 3959; // Earth's radius in miles\n            const dLat = (lat2 - lat1) * Math.PI / 180;\n            const dLng = (lng2 - lng1) * Math.PI / 180;\n            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                    Math.sin(dLng/2) * Math.sin(dLng/2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n            return R * c;\n        }\n        \n        calculateScore() {\n            let score = 0;\n            \n            // Time on site scoring (max 30 points)\n            if (this.profile.timeOnSite > 300) score += 30; // 5+ minutes\n            else if (this.profile.timeOnSite > 180) score += 20; // 3+ minutes\n            else if (this.profile.timeOnSite > 60) score += 10; // 1+ minute\n            else if (this.profile.timeOnSite > 30) score += 5; // 30+ seconds\n            \n            // Scroll depth scoring (max 20 points)\n            if (this.profile.scrollDepth > 80) score += 20;\n            else if (this.profile.scrollDepth > 60) score += 15;\n            else if (this.profile.scrollDepth > 40) score += 10;\n            else if (this.profile.scrollDepth > 20) score += 5;\n            \n            // Interaction scoring (max 40 points)\n            const interactionScore = this.profile.interactions.reduce((sum, interaction) => {\n                return sum + interaction.value;\n            }, 0);\n            score += Math.min(40, interactionScore);\n            \n            // Traffic source scoring (max 15 points)\n            switch (this.profile.trafficSource) {\n                case 'google': score += 15; break;\n                case 'social': score += 12; break;\n                case 'referral': score += 10; break;\n                case 'direct': score += 8; break;\n                default: score += 5;\n            }\n            \n            // Location scoring (max 20 points)\n            if (this.profile.distanceFromReno !== undefined) {\n                if (this.profile.distanceFromReno < 25) score += 20; // Very local\n                else if (this.profile.distanceFromReno < 100) score += 15; // Regional\n                else if (this.profile.distanceFromReno < 300) score += 10; // State/nearby\n                else score += 5; // Far but interested\n            }\n            \n            // Time of visit scoring (max 10 points)\n            const hour = this.profile.visitTime;\n            if (hour >= 9 && hour <= 17) score += 10; // Business hours\n            else if (hour >= 18 && hour <= 21) score += 8; // Evening\n            else score += 5; // Off hours\n            \n            // Day of week scoring (max 5 points)\n            const day = this.profile.dayOfWeek;\n            if (day >= 1 && day <= 5) score += 5; // Weekday\n            else score += 3; // Weekend\n            \n            // Returning visitor bonus\n            if (this.profile.returningVisitor) score += 10;\n            \n            // Reading behavior bonus\n            if (this.profile.readingBehavior === 'careful') score += 5;\n            \n            // Interest diversity bonus\n            if (this.profile.interests.length > 2) score += 5;\n            \n            this.score = Math.min(150, score); // Cap at 150\n            \n            // Store score for analytics\n            if (typeof gtag !== 'undefined') {\n                gtag('event', 'lead_score_update', {\n                    'event_category': 'Lead Scoring',\n                    'value': this.score\n                });\n            }\n        }\n        \n        getLeadQuality() {\n            if (this.score >= 100) return 'hot';\n            if (this.score >= 70) return 'warm';\n            if (this.score >= 40) return 'cold';\n            return 'visitor';\n        }\n        \n        triggerActions() {\n            const quality = this.getLeadQuality();\n            const key = `action_${quality}_${Math.floor(this.score/10)}`;\n            \n            if (sessionStorage.getItem(key)) return; // Already triggered\n            \n            switch (quality) {\n                case 'hot':\n                    this.triggerHotLeadAction();\n                    break;\n                case 'warm':\n                    this.triggerWarmLeadAction();\n                    break;\n                case 'cold':\n                    this.triggerColdLeadAction();\n                    break;\n            }\n            \n            sessionStorage.setItem(key, 'triggered');\n        }\n        \n        triggerHotLeadAction() {\n            // High-value visitor - immediate personal attention\n            const message = this.profile.interests.length > 0 ? \n                `I see you're seriously interested in ${this.profile.interests.join(' & ')}!` :\n                'You seem very interested in our work!';\n                \n            this.showPersonalizedOffer({\n                title: '🔥 VIP TREATMENT ACTIVATED!',\n                message: `${message} You qualify for our VIP service with priority booking and exclusive consultation.`,\n                cta: 'Get VIP Service Now',\n                action: () => {\n                    const vipMessage = `VIP LEAD ALERT! Score: ${this.score}. Interests: ${this.profile.interests.join(', ')}. Time on site: ${Math.round(this.profile.timeOnSite/60)} minutes. Ready for immediate consultation!`;\n                    window.open(`sms:+15302140676?body=${encodeURIComponent(vipMessage)}`, '_blank');\n                },\n                style: 'vip'\n            });\n        }\n        \n        triggerWarmLeadAction() {\n            // Engaged visitor - nurture with value\n            const personalizedMessage = this.profile.distanceFromReno < 50 ? \n                'Since you\\'re local to Reno, get FREE mobile service!' :\n                'Get a FREE consultation and 3D preview!';\n                \n            this.showPersonalizedOffer({\n                title: '💎 SPECIAL OFFER FOR YOU!',\n                message: personalizedMessage + ' You\\'ve shown serious interest - let\\'s make it happen!',\n                cta: 'Claim My Offer',\n                action: () => {\n                    const warmMessage = `Warm lead (Score: ${this.score}). ${personalizedMessage} Interests: ${this.profile.interests.join(', ') || 'General'}. Ready to move forward!`;\n                    window.open(`sms:+15302140676?body=${encodeURIComponent(warmMessage)}`, '_blank');\n                },\n                style: 'warm'\n            });\n        }\n        \n        triggerColdLeadAction() {\n            // Casual browser - provide value and build trust\n            this.showPersonalizedOffer({\n                title: '✨ FREE CONSULTATION AVAILABLE',\n                message: 'No pressure! Get expert advice and see if custom grillz are right for you. Completely free consultation.',\n                cta: 'Get Free Advice',\n                action: () => {\n                    const coldMessage = `New inquiry (Score: ${this.score}). Interested in free consultation. Please provide information about services and pricing.`;\n                    window.open(`sms:+15302140676?body=${encodeURIComponent(coldMessage)}`, '_blank');\n                },\n                style: 'cold'\n            });\n        }\n        \n        showPersonalizedOffer({title, message, cta, action, style}) {\n            const styles = {\n                vip: 'background: linear-gradient(45deg, #8A2BE2, #4B0082); color: #fff; border: 2px solid #FFD700;',\n                warm: 'background: linear-gradient(45deg, #FF6347, #DC143C); color: #fff;',\n                cold: 'background: linear-gradient(45deg, #32CD32, #228B22); color: #fff;'\n            };\n            \n            const offer = document.createElement('div');\n            offer.innerHTML = `\n                <div style=\"position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); ${styles[style]} padding: 30px; border-radius: 20px; z-index: 10001; max-width: 450px; text-align: center; box-shadow: 0 8px 30px rgba(0,0,0,0.5); animation: personalizedSlideIn 0.8s ease-out;\">\n                    <div style=\"font-size: 22px; font-weight: bold; margin-bottom: 15px;\">${title}</div>\n                    <div style=\"font-size: 16px; margin-bottom: 20px; line-height: 1.4;\">${message}</div>\n                    <div style=\"font-size: 14px; margin-bottom: 20px; opacity: 0.9;\">Lead Quality: ${this.getLeadQuality().toUpperCase()} (Score: ${this.score}/150)</div>\n                    <button onclick=\"(${action.toString()})(); this.parentElement.parentElement.remove();\" style=\"background: ${style === 'vip' ? '#FFD700' : '#fff'}; color: ${style === 'vip' ? '#000' : '#333'}; border: none; padding: 12px 25px; border-radius: 8px; cursor: pointer; font-weight: bold; font-size: 16px; margin-right: 15px;\">${cta}</button>\n                    <button onclick=\"this.parentElement.parentElement.remove();\" style=\"background: transparent; border: 2px solid #fff; color: #fff; padding: 12px 25px; border-radius: 8px; cursor: pointer;\">Maybe Later</button>\n                </div>\n            `;\n            \n            document.body.appendChild(offer);\n            \n            // Track the offer\n            if (typeof gtag !== 'undefined') {\n                gtag('event', 'personalized_offer_shown', {\n                    'event_category': 'Lead Scoring',\n                    'event_label': style,\n                    'value': this.score\n                });\n            }\n        }\n        \n        // Public method to get lead data for forms\n        getLeadData() {\n            return {\n                score: this.score,\n                quality: this.getLeadQuality(),\n                profile: this.profile,\n                timestamp: Date.now()\n            };\n        }\n    }\n    \n    // Add required CSS\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes personalizedSlideIn {\n            0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0; }\n            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }\n        }\n    `;\n    document.head.appendChild(style);\n    \n    // Initialize lead scorer\n    const leadScorer = new LeadScorer();\n    \n    // Make lead data available globally for form submissions\n    window.getLeadData = () => leadScorer.getLeadData();\n    \n    // Enhanced form submission with lead data\n    document.addEventListener('DOMContentLoaded', function() {\n        const leadForm = document.getElementById('leadForm');\n        if (leadForm) {\n            leadForm.addEventListener('submit', function(e) {\n                const leadData = leadScorer.getLeadData();\n                \n                // Add lead data to form submission\n                const leadDataInput = document.createElement('input');\n                leadDataInput.type = 'hidden';\n                leadDataInput.name = 'leadData';\n                leadDataInput.value = JSON.stringify(leadData);\n                this.appendChild(leadDataInput);\n                \n                // Track high-value conversions\n                if (typeof gtag !== 'undefined') {\n                    gtag('event', 'form_submission', {\n                        'event_category': 'Conversion',\n                        'event_label': leadData.quality,\n                        'value': leadData.score\n                    });\n                }\n            });\n        }\n        \n        // Enhanced mold form with lead scoring\n        const moldForm = document.getElementById('moldForm');\n        if (moldForm) {\n            moldForm.addEventListener('submit', function(e) {\n                const leadData = leadScorer.getLeadData();\n                \n                // Add lead scoring data to mold form\n                const leadScoreInput = document.createElement('input');\n                leadScoreInput.type = 'hidden';\n                leadScoreInput.name = 'leadScore';\n                leadScoreInput.value = `${leadData.score} (${leadData.quality})`;\n                this.appendChild(leadScoreInput);\n                \n                const profileInput = document.createElement('input');\n                profileInput.type = 'hidden';\n                profileInput.name = 'visitorProfile';\n                profileInput.value = `Time: ${Math.round(leadData.profile.timeOnSite/60)}min, Scroll: ${leadData.profile.scrollDepth}%, Interests: ${leadData.profile.interests.join(', ')}`;\n                this.appendChild(profileInput);\n            });\n        }\n    });\n    \n})();